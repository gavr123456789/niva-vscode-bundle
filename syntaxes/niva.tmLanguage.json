{
  "name": "Niva",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#entity"
    },
    {
      "include": "#type-assignment"
    },
    {
      "include": "#string"
    },
    {
      "include": "#string-multiline"
    },
    {
      "include": "#character"
    },
    {
      "include": "#constant"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.niva",
          "match": "\\b(type|constructor|enum|union|mut|this)\\b"
        },
        {
          "name": "keyword.operator.splat.niva",
          "match": "\\.\\."
        },
        {
          "name": "keyword.operator.comparison.int.niva",
          "match": "(<=|>=|==|!=|<|>)"
        },
        {
          "name": "keyword.operator.logical.niva",
          "match": "(<-|->|\\|>|\\^|&&|\\|\\||\\|=>|=>|\\|)"
        },
        {
          "name": "keyword.operator.comparison.int.niva",
          "match": "(>\\?|<=|>=|==|!=|<|>)"
        },

        {
          "name": "keyword.operator.arithmetic.int.niva",
          "match": "(\\+|\\-|/|\\*|%)"
        },
        {
          "name": "keyword.niva",
          "match": "="
        },
        {
          "comment": "Fake conditionals. Smalltalk Methods.",
          "match": "ifCurtailed:|ifTrue:|ifFalse:|whileFalse:|whileTrue:|ifNull:|ifNotNull:",
          "name": "keyword.control.conditionals.niva"
        }
      ]
    },
    "type-assignment": {
      "match": "::[A-Z][a-zA-Z]*",
      "name": "entity.name.function.reference.niva"
    },
    "string": {
      "begin": "(?<!\")\"(?!\")",
      "end": "\"",
      "name": "string.quoted.double.niva",
      "patterns": [
        {
          "match": "\\\\.",
          "name": "constant.character.escape.niva"
        },
        {
          "include": "#string-escape-simple"
        },
        {
          "include": "#string-escape-bracketed"
        }
      ]
    },
    "string-empty": {
      "match": "(?<!\")\"\"(?!\")",
      "name": "string.quoted.double.niva"
    },
    "string-escape-simple": {
      "match": "(?<!\\\\)\\$\\w+\\b",
      "name": "variable.string-escape.niva"
    },
    "string-escape-bracketed": {
      "begin": "(?<!\\\\)(\\$\\{)",
      "end": "(\\})",
      "name": "meta.template.expression.niva",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.template-expression.begin"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.template-expression.end"
        }
      },
      "patterns": [
        {
          "include": "#code"
        }
      ]
    },
    "string-multiline": {
      "begin": "\"\"\"",
      "end": "\"\"\"",
      "name": "string.quoted.double.niva",
      "patterns": [
        {
          "match": "\\\\.",
          "name": "constant.character.escape.niva"
        },
        {
          "include": "#string-escape-simple"
        },
        {
          "include": "#string-escape-bracketed"
        }
      ]
    },
    "character": {
      "begin": "'",
      "end": "'",
      "name": "string.quoted.single.niva",
      "patterns": [
        {
          "match": "\\\\.",
          "name": "constant.character.escape.niva"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "include": "#comment-line"
        },
        {
          "include": "#comment-block"
        }
      ]
    },
    "comment-line": {
      "begin": "//",
      "end": "$",
      "name": "comment.line.double-slash.niva"
    },
    "comment-block": {
      "begin": "/\\*(?!\\*)",
      "end": "\\*/",
      "name": "comment.block.niva"
    },
    "constant": {
      "patterns": [
        {
          "include": "#binary_number"
        },
        {
          "include": "#octal_number"
        },
        {
          "include": "#hexadecimal_number"
        },
        {
          "include": "#decimal_number"
        },
        {
          "include": "#boolean"
        },
        {
          "name": "entity.name.type.niva",
          "match": "[[:upper:]][[:word:]]*"
        }
      ]
    },
    "binary_number": {
      "name": "constant.numeric.binary.niva",
      "match": "\\b0b[0-1]+\\b",
      "patterns": []
    },
    "octal_number": {
      "name": "constant.numeric.octal.niva",
      "match": "\\b0o[0-7]+\\b",
      "patterns": []
    },
    "decimal_number": {
      "name": "constant.numeric.decimal.niva",
      "match": "\\b[[:digit:]][[:digit:]_]*(\\.[[:digit:]]*)?\\b",
      "patterns": []
    },
    "hexadecimal_number": {
      "name": "constant.numeric.hexadecimal.niva",
      "match": "\\b0x[[:xdigit:]]+\\b",
      "patterns": []
    },
    "boolean": {
      "name": "constant.language.boolean.niva",
      "match": "\\b(true|false)\\b",
      "patterns": []
    },
    "entity": {
      "patterns": [
        {
          "name": "constant.numeric.decimal.niva",
          "match": "\\b([[:lower:]][[:word:]]*)(::)",
          "captures": {
            "1": {
              "name": "object.niva"
            },
            "2": {
              "name": "entity.name.niva"
            },
            "4": {
              "sname": "entity.name.niva",
              "name": "keyword.operator.access.dot.niva"
            },
            "5": {
              "sname": "punctuation.period.niva",
              "name": "keyword.type.variable.niva"
            }
          }
        },
        {
          "name": "constant.numeric.decimal.niva",
          "match": "\\b([[:lower:]][[:word:]]*)(:)\\s([a-z_][a-zA-Z_0-9]*\\s)?",
          "match": "\\b([[:lower:]][[:word:]]*)(:)\\s([a-z_][a-zA-Z_0-9]*\\s)?",
          "captures": {
            "1": {
              "names": "punctuation.period.niva",
              "name": "variable.parameter.niva"
            },
            "2": {
              "names": "punctuation.period.niva",
              "name": "variable.parameter.niva"
            },
            "3": {
              "sname": "storage.attribute.niva",
              "ssname": "variable.other.niva",
              "good_name": "support.type.niva",
              "name": "entity.name.niva"
            }

          }
        },
        {
          "name": "white.niva",
          "match": "\\b([[:lower:]][[:word:]]*)"
        }
      ]
    }
  },
  "scopeName": "source.niva"
}
